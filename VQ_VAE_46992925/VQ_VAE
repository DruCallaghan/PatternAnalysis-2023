'''
VQ-VAE
Model as implemented by
https://www.youtube.com/watch?v=1ZHzAOutcnw
'''
import os
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as transforms
import numpy as np  
from tqdm import tqdm
from PIL import Image
import torch.utils.data
from torchvision import datasets, transforms, utils
import matplotlib.pyplot as plt

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print("Torch version ", torch.__version__)


# ------------------------------------------------
# Data Loader

path = "C:/Users/61423/COMP3710/data/keras_png_slices_data/"
#path = "//puffball.labs.eait.uq.edu.au/s4699292/Documents/2023 Sem2/Comp3710/keras_png_slices_data/keras_png_slices_data/"

def load_data_from_folder(name):
    data = []
    i = 0
    
    for filename in tqdm([f for f in os.listdir(path+name) if f.lower().endswith('.png')]):            # tqdm adds loading bar!
        
        image_path = os.path.join(path+name, filename)
        image = Image.open(image_path).convert('L')         # Convert to grayscale (single channel)
        image = np.array(image)
        
        # Add channel
        # C, H, W
        image = np.expand_dims(image, axis=0)

        data.append(image)

        if i == 50:
            return np.array(data)
        i += 1

    return np.array(data)

# Loading
# B, C, H, W (Numpy array)
print("> Loading Training data")
train_data = (load_data_from_folder("keras_png_slices_train/"))
print("> Loading Test data")
test_data = (load_data_from_folder("keras_png_slices_test/"))

print("The shape of the (training) data is: ", train_data.shape)
print("The shape of the (testing) data is: ", test_data.shape)

# Transforms and tensor
mean = np.mean(train_data)
std = np.std(train_data)

transform = transforms.Compose([
                                transforms.ToTensor(),
                                transforms.Normalize(mean=0.13242, std=0.18826)
])

train_data = torch.stack([transform(item) for item in train_data]).permute(0, 2, 3, 1)
test_data = torch.stack([transform(item) for item in test_data]).permute(0, 2, 3, 1)

print("The shape of the (training) data is: ", train_data.shape)
print("The shape of the (testing) data is: ", test_data.shape)

# DataLoaders
# B, C, H, W
train_dataloader = torch.utils.data.DataLoader(train_data, batch_size=128, shuffle=True)
test_dataloader = torch.utils.data.DataLoader(test_data, batch_size=128, shuffle=True)

#plt.imshow(train_data[0][0])
#plt.title("First Training image (Normalised)")
#plt.gray()
#plt.show()

print("> Data Loading Finished")

# ------------------------------------------------
# Model



class Encoder(nn.Module):
    def __init__(self, ):
        super(Encoder, self).__init__()
        
        self.encoder = nn.Sequential(
            nn.Conv2d(1, 16, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.Conv2d(16, 16, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.Conv2d(16, 32, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(32),
            nn.ReLU(),
        )
        
    def forward(self, x):
        out = self.encoder(x)
        return out


class Quantiser(nn.Module):
    def __init__(self, num_embeddings, embedding_dim) -> None:
        super(Quantiser, self).__init__()
        
        self.num_embeddings = num_embeddings
        self.embedding_dim = embedding_dim
        self.beta = 0.2
        
        self.embedding = self.embedding = nn.Embedding(num_embeddings=num_embeddings, embedding_dim=embedding_dim)


    def get_encoding_indices(self, quant_input):
        # Flatten
        quant_input = quant_input.permute(0, 2, 3, 1)
        quant_input = quant_input.reshape((quant_input.size(0), -1, quant_input.size(-1)))
    
        # Compute pairwise distances
        dist = torch.cdist(quant_input, self.embedding.weight[None, :].repeat((quant_input.size(0), 1, 1)))
        
        # Find index of nearest embedding
        encoding_indices = torch.argmin(dist, dim=-1)       # in form B, W*H
        return encoding_indices
          
    
    def forward(self, quant_input):
        
        B, C, H, W = quant_input.shape
                
        # Get the encoding indices
        encoding_indices = self.get_encoding_indices(quant_input)

        # Select the embedding weights
        quant_out = torch.index_select(self.embedding.weight, 0, encoding_indices.view(-1))
        quant_out = quant_out.reshape((B, H, W, C)).permute(0, 3, 1, 2)

        print(quant_out.shape, quant_input.shape)
        
        
        # Compute losses
        commitment_loss = torch.mean((quant_out.detach() - quant_input)**2)             # TODO change to MSE
        codebook_loss = torch.mean((quant_out - quant_input.detach())**2)
        loss = codebook_loss + self.beta*commitment_loss
        
        # Straight through gradient estimator
        quant_out = quant_input + (quant_out - quant_input).detach()        # Detach ~ ignored for back-prop

        # Reshape encoding indices to 'B, H, W'
        # TODO CURRENTLY MEANS NOTHING
        encoding_indices = encoding_indices.reshape((-1, quant_out.size(-2), quant_out.size(-1)))
        
        return quant_out, loss, encoding_indices


class Decoder(nn.Module):
    def __init__(self, ) -> None:
        super(Decoder, self).__init__()
        
        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(32, 16, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.ConvTranspose2d(16, 16, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.ConvTranspose2d(16, 1, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(1),
        )
        
    def forward(self, x):
        out = self.decoder(x)
        return out
            



class VQVAE(nn.Module):
    def __init__(self, num_embeddings, embedding_dim):
        super(VQVAE, self).__init__()
        
        self.num_embeddings = num_embeddings
        self.embedding_dim = embedding_dim
        
        self.encoder = Encoder()
        self.quantiser = Quantiser(num_embeddings=num_embeddings, embedding_dim=embedding_dim)
        self.decoder = Decoder()
        
            
    def forward(self, x):
        # B, C, H, W
        quant_input = self.encoder(x)
        quant_out, quant_loss, encoding_indices = self.quantiser(quant_input)
        output = self.decoder(quant_out)
        
        # Reconstruction Loss, and find the total loss
        reconstruction_loss = F.mse_loss(x, output)
        total_loss = quant_loss + reconstruction_loss
        
        return output, total_loss, encoding_indices
    
# ------------------------------------------------
# Training

losses = []     # for visualisation

# Hyperparams
learning_rate = 1.e-3
num_epochs = 5

model = VQVAE(num_embeddings=265, embedding_dim=32).to(device)
print(model)

optimiser = torch.optim.Adam(model.parameters(), learning_rate)


for epoch_num, epoch in enumerate(range(num_epochs)):
    model.train()
    for train_batch in tqdm(train_dataloader):
        images = train_batch
        images = images.to(device, dtype=torch.float32)
        
        output, total_losses, _ = model(images)

        optimiser.zero_grad()       # Reset gradients to zero for back-prop (not cumulative)
        total_losses.backward()     # Calculate grad
        optimiser.step()            # Adjust weights
        
   
    # Evaluate
    model.eval()
    
    for test_batch in (test_dataloader):
        images = test_batch

        images = images.to(device, dtype=torch.float32)         # (Set as float to ensure weights input are the same type)
        
        with torch.no_grad():
            output, total_losses, _ = model(images)

            
    print("Epoch {} of {}. Total Loss: {}".format(epoch_num, num_epochs, total_losses))
    
    losses.append(total_losses.cpu())     # To graph losses (TODO still in tensors)

# -------------------------------------------------
# Visualise


def plot_results(num_images):

    input_imgs = test_data[0:num_images]
    input_imgs = input_imgs.to(device, dtype=torch.float32)

    # DEBUGGING
    print("Shape of the input img is: ", input_imgs.shape)

    with torch.no_grad():  # Ensure no gradient calculation
        output_imgs, _, encoding_indices = model(input_imgs)
        
        
    #Debugging
    print("Shape of the output img is: ", output_imgs.shape)
    print("Enc indices shape is: ", encoding_indices.shape)


    fig, ax = plt.subplots(num_images, 3)
    plt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0)

    ax[0, 0].set_title("Inputs")
    ax[0, 1].set_title("CodeBook Indices")
    ax[0, 2].set_title("Reconstruction")

    for i in range(num_images):
        for j in range(3):
            ax[i, j].axis('off')
        ax[i, 0].imshow(input_imgs[i][0].cpu().numpy(), cmap='gray')
        ax[i, 1].imshow(encoding_indices[i].cpu().numpy())
        ax[i, 2].imshow(output_imgs[i][0].cpu().numpy(), cmap='gray')
    
    plt.show()

    plt.plot(losses)
    plt.title("Losses")
    plt.xlabel("Num Epochs")
    plt.ylabel("Loss")
    plt.show()

plot_results(2)



# ------------- Pixel CNN
# Define the PixelConvLayer class in PyTorch
class PixelConvLayer(nn.Module):
    def __init__(self, mask_type, in_channels, out_channels, kernel_size, stride, padding):
        super(PixelConvLayer, self).__init__()
        self.mask_type = mask_type
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding)
        self.build_mask()

    def build_mask(self):
        kernel_shape = self.conv.weight.shape
        self.mask = torch.zeros(kernel_shape)
        self.mask[:, :, :kernel_shape[2] // 2, :] = 1.0
        self.mask[:, :, kernel_shape[2] // 2, :kernel_shape[3] // 2] = 1.0
        if self.mask_type == "B":
            self.mask[:, :, kernel_shape[2] // 2, kernel_shape[3] // 2] = 1.0

    def forward(self, inputs):
        with torch.no_grad():
            self.conv.weight.data *= self.mask
        return self.conv(inputs)

# Define the ResidualBlock class in PyTorch
class ResidualBlock(nn.Module):
    def __init__(self, in_channels, filters):
        super(ResidualBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, filters, kernel_size=1)
        self.pixel_conv = PixelConvLayer(mask_type="B", in_channels=filters, out_channels=filters // 2, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(filters // 2, filters, kernel_size=1)

    def forward(self, inputs):
        x = self.conv1(inputs)
        x = self.pixel_conv(x)
        x = self.conv2(x)
        return inputs + x

# Define your PyTorch model
class PixelCNN(nn.Module):
    def __init__(self, pixelcnn_input_shape, num_residual_blocks, num_pixelcnn_layers, num_embeddings):
        super(PixelCNN, self).__init__()
        self.pixel_conv_initial = PixelConvLayer(mask_type="A", in_channels=num_embeddings, out_channels=128, kernel_size=7, stride=1, padding=3)
        self.residual_blocks = nn.ModuleList([ResidualBlock(in_channels=128, filters=128) for _ in range(num_residual_blocks)])
        self.pixel_conv_layers = nn.ModuleList([PixelConvLayer(mask_type="B", in_channels=128, out_channels=128, kernel_size=1, stride=1, padding=0) for _ in range(num_pixelcnn_layers)])
        self.out_conv = nn.Conv2d(in_channels=128, out_channels=num_embeddings, kernel_size=1, stride=1, padding=0)

    def forward(self, inputs):
        x = self.pixel_conv_initial(inputs)
        for block in self.residual_blocks:
            x = block(x)
        for layer in self.pixel_conv_layers:
            x = layer(x)
        out = self.out_conv(x)
        return out

# Create an instance of the PixelCNN model
batch_size = 128
num_embeddings = 256
height = 256
width = 256

pixelcnn_input_shape = (batch_size, num_embeddings, height, width)  # Define your input shape
num_residual_blocks = 5  # Define the number of residual blocks
num_pixelcnn_layers = 5  # Define the number of PixelConvLayers
num_embeddings = model.num_embeddings  # Define the number of embeddings
batch_size = 1

cnn_model = PixelCNN(pixelcnn_input_shape, num_residual_blocks, num_pixelcnn_layers, num_embeddings)
print(cnn_model)

